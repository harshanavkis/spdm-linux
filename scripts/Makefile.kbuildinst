# SPDX-License-Identifier: GPL-2.0

ifneq ($(CROSS_COMPILE),)

# ==========================================================================
# Cross-build binaries necessary to build modules on the target
#
__crossprogs := $(sort $(notdir $(crossprogs-y)))

# C executables compiled from a single .c file
cross-csingle	:= $(foreach m,$(__crossprogs),$(if $($(m)-objs),,$(m)))

# C executables linked from several .o files
cross-cmulti	:= $(foreach m,$(__crossprogs),$(if $($(m)-objs),$(m)))

# Object .o files compiled from .c files
cross-cobjs	:= $(sort $(foreach m,$(cross-cmulti),$($(m)-objs)))

cross-csingle	:= $(addprefix $(obj)/.cross/,$(cross-csingle))
cross-cmulti	:= $(addprefix $(obj)/.cross/,$(cross-cmulti))
cross-cobjs	:= $(addprefix $(obj)/.cross/,$(cross-cobjs))

# Handle options to gcc. Support building with separate output directory.
_crossc_flags    = $(HOST_EXTRACFLAGS) $(HOSTCFLAGS_$(basetarget).o)

ifeq ($(KBUILD_SRC),)
__crossc_flags	 = $(_crossc_flags)
else
__crossc_flags	 = -I$(obj) $(call flags,_crossc_flags)
endif

crossc_flags     = -Wp,-MD,$(depfile) $(__crossc_flags)

crossld_flags    = $(HOST_LFS_LDFLAGS) $(crossc_flags)
crossld_libs     = $(HOST_LFS_LIBS)

# Create executable from a single .c file
# cross-csingle -> executable
quiet_cmd_cross-csingle	= CC      $@
      cmd_cross-csingle	= $(CC) $(crossld_flags) -o $@ $< \
			  $(crossld_libs) $(HOSTLDLIBS_$(@F))
$(cross-csingle): $(obj)/.cross/%: $(src)/%.c FORCE
	$(call if_changed_dep,cross-csingle)

# Link executable based on list of .o files, all plain C
# cross-cmulti -> executable
quiet_cmd_cross-cmulti	= LD      $@
      cmd_cross-cmulti	= $(CC) $(crossld_flags) -o $@ \
			  $(addprefix $(obj)/.cross/,$($(@F)-objs)) \
			  $(crossld_libs) $(HOSTLDLIBS_$(@F))
$(cross-cmulti): FORCE
	$(call if_changed,cross-cmulti)
$(call multi_depend, $(cross-cmulti), , -objs)

# Create .o file from a single .c file
# cross-cobjs -> .o
#
# Some host-cobjs have special prerequisites.  Apply them to cross-cobjs
# by letting the cross .o file depend on the host .o file.
quiet_cmd_cross-cobjs	= CC      $@
      cmd_cross-cobjs	= $(CC) $(crossld_flags) -c -o $@ $<
$(cross-cobjs): $(obj)/.cross/%.o: $(src)/%.c $(obj)/%.o FORCE
	$(call if_changed_dep,cross-cobjs)

# ==========================================================================
# Install module build environment to $(INSTALL_KBUILD_PATH)
#
# When cross-compiling, install cross-compiled versions of the hostprogs.
# Else install the hostprogs directly.  (But only the ones added to
# crossprogs-y and thereby declared essential for building modules.)
#
        install-dir = $(INSTALL_KBUILD_PATH)/$(patsubst %/.cross/,%,$(dir $<))
        install-progs := $(cross-csingle) $(cross-cmulti)
        targets += $(cross-csingle) $(cross-cmulti) $(cross-cobjs)
        always  += $(cross-csingle) $(cross-cmulti) $(cross-cobjs)
else
        install-dir = $(INSTALL_KBUILD_PATH)/$(dir $<)
        install-progs := $(addprefix $(obj)/,$(crossprogs-y))
endif

quiet_cmd_kbuildprogs_install = INSTALL $<
      cmd_kbuildprogs_install = mkdir -p $(2); cp $< $(2)

kbuildprogs_install: $(install-progs)
	$(call cmd,kbuildprogs_install,$(install-dir))
PHONY   += kbuildprogs_install
targets += kbuildprogs_install
always  += kbuildprogs_install
